Description: Add support for Hurd
 Add support to configure.ac for GNU Hurd, per
 https://www.gnu.org/software/hurd/hurd/porting/guidelines.html
Author: Faidon Liambotis <paravoid@debian.org>
Author: Samuel Thibault <sthibault@debian.org>
Bug-Debian: https://bugs.debian.org/828871
Forwarded: https://github.com/jemalloc/jemalloc/pull/2443
Last-Update: 2023-05-16

--- a/configure.ac
+++ b/configure.ac
@@ -711,6 +711,15 @@ case "${host}" in
 	AC_DEFINE([JEMALLOC_THREADED_INIT], [ ], [ ])
 	AC_DEFINE([JEMALLOC_USE_CXX_THROW], [ ], [ ])
 	;;
+  *-*-gnu*)
+	dnl syscall(2) and secure_getenv(3) are exposed by _GNU_SOURCE.
+	JE_APPEND_VS(CPPFLAGS, -D_GNU_SOURCE)
+	JE_APPEND_VS(CPPFLAGS, -DPATH_MAX=8192)
+	abi="elf"
+	AC_DEFINE([JEMALLOC_HAS_ALLOCA_H])
+	AC_DEFINE([JEMALLOC_THREADED_INIT], [ ])
+	AC_DEFINE([JEMALLOC_USE_CXX_THROW], [ ])
+	;;
   *-*-netbsd*)
 	AC_MSG_CHECKING([ABI])
         AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
@@ -1873,6 +1882,15 @@ dnl Check if we have dlsym support.
   fi
 fi
 
+dnl Check if pthread_getaffinity_np exists (does not on GNU Hurd)
+AC_CHECK_FUNC([pthread_getaffinity_np],
+              [have_pthread_getaffinity_np="1"],
+              [have_pthread_getaffinity_np="0"]
+             )
+if test "x$have_pthread_getaffinity_np" = "x1" ; then
+  AC_DEFINE([JEMALLOC_HAVE_PTHREAD_GETAFFINITY_NP], [ ])
+fi
+
 JE_APPEND_VS(CPPFLAGS, -D_REENTRANT)
 
 dnl Check whether clock_gettime(2) is in libc or librt.
--- a/src/background_thread.c
+++ b/src/background_thread.c
@@ -82,7 +82,7 @@ static inline bool
 set_current_thread_affinity(int cpu) {
 #if defined(JEMALLOC_HAVE_SCHED_SETAFFINITY)
 	cpu_set_t cpuset;
-#else
+#elif defined(JEMALLOC_HAVE_PTHREAD_GETAFFINITY_NP)
 #  ifndef __NetBSD__
 	cpuset_t cpuset;
 #  else
@@ -90,16 +90,20 @@ set_current_thread_affinity(int cpu) {
 #  endif
 #endif
 
+#if defined(JEMALLOC_HAVE_SCHED_SETAFFINITY) || defined(JEMALLOC_HAVE_PTHREAD_GETAFFINITY_NP)
 #ifndef __NetBSD__
 	CPU_ZERO(&cpuset);
 	CPU_SET(cpu, &cpuset);
 #else
 	cpuset = cpuset_create();
 #endif
+#else
+	return 1;
+#endif
 
 #if defined(JEMALLOC_HAVE_SCHED_SETAFFINITY)
 	return (sched_setaffinity(0, sizeof(cpu_set_t), &cpuset) != 0);
-#else
+#elif defined(JEMALLOC_HAVE_PTHREAD_GETAFFINITY_NP)
 #  ifndef __NetBSD__
 	int ret = pthread_setaffinity_np(pthread_self(), sizeof(cpuset_t),
 	    &cpuset);
--- a/src/jemalloc.c
+++ b/src/jemalloc.c
@@ -740,8 +740,11 @@ malloc_ncpus(void) {
 #  endif
 #  if defined(JEMALLOC_HAVE_SCHED_SETAFFINITY)
 		sched_getaffinity(0, sizeof(set), &set);
-#  else
+#  elif defined(JEMALLOC_HAVE_PTHREAD_GETAFFINITY_NP)
 		pthread_getaffinity_np(pthread_self(), sizeof(set), &set);
+#  else
+		CPU_ZERO(&set);
+		CPU_SET(0, &set);
 #  endif
 		result = CPU_COUNT(&set);
 	}
@@ -777,8 +780,11 @@ malloc_cpu_count_is_deterministic()
 #    endif /* __FreeBSD__ */
 #    if defined(JEMALLOC_HAVE_SCHED_SETAFFINITY)
 	sched_getaffinity(0, sizeof(set), &set);
-#    else /* !JEMALLOC_HAVE_SCHED_SETAFFINITY */
+#    elif defined(JEMALLOC_HAVE_PTHREAD_GETAFFINITY_NP)
 	pthread_getaffinity_np(pthread_self(), sizeof(set), &set);
+#    else
+	CPU_ZERO(&set);
+	CPU_SET(0, &set);
 #    endif /* JEMALLOC_HAVE_SCHED_SETAFFINITY */
 	long cpu_affinity = CPU_COUNT(&set);
 	if (cpu_affinity != cpu_conf) {
